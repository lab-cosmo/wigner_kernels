data type: double
random seed: 0
batch size: 10000
conversion factor: HARTREE_TO_KCAL_MOL
target key: U0
dataset path: datasets/qm9.xyz
n_test: 1000
n_train: 500
r_cut: 5.0
nu_max: 4
l_max: 3
optimization target: mae
Density parameters: C=0.03, L_NU=0.0, L_R=1.0
Gaussian smoothing map for r = 1, 2, 3, 4 A:
nu = 1: 0.08154845485377135 0.2216716829679195 0.60256610769563 1.637944500994327
nu = 2: 0.08154845485377135 0.2216716829679195 0.60256610769563 1.637944500994327
nu = 3: 0.08154845485377135 0.2216716829679195 0.60256610769563 1.637944500994327
nu = 4: 0.08154845485377135 0.2216716829679195 0.60256610769563 1.637944500994327
Reading dataset
Shuffling and extracting from dataset
Shuffling and extraction done
Calculating composition kernels
Composition kernels done
Number of spline points: 10241
Calculating expansion coefficients
Expansion coefficients done
Computing train-train-kernels
     Calculating kernels for center species 1
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 46/46 [01:04<00:00,  1.41s/it]
     Calculating kernels for center species 6
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 32/32 [00:28<00:00,  1.13it/s]
     Calculating kernels for center species 7
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 6/6 [00:00<00:00,  7.80it/s]
     Calculating kernels for center species 8
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 7/7 [00:01<00:00,  5.54it/s]
     Calculating kernels for center species 9
100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 102.90it/s]
Computing train-test-kernels
     Calculating kernels for center species 1
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 93/93 [01:59<00:00,  1.29s/it]
     Calculating kernels for center species 6
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 64/64 [00:57<00:00,  1.12it/s]
     Calculating kernels for center species 7
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 11/11 [00:01<00:00,  7.25it/s]
     Calculating kernels for center species 8
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 14/14 [00:02<00:00,  5.28it/s]
     Calculating kernels for center species 9
100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 103.79it/s]
Printing a few representative kernels:
nu = 0:
tensor([[119., 134.,  65.,  74.,  92., 106.],
        [134., 153.,  70.,  82., 104., 119.],
        [ 65.,  70.,  49.,  50.,  53.,  62.],
        [ 74.,  82.,  50.,  54.,  59.,  70.],
        [ 92., 104.,  53.,  59.,  75.,  82.],
        [106., 119.,  62.,  70.,  82.,  97.]], device='cuda:0')
nu = 1:
tensor([[2.9748, 3.5089, 1.3304, 0.9182, 2.2349, 2.3097],
        [3.5089, 4.6653, 1.4207, 0.7402, 2.7487, 2.7571],
        [1.3304, 1.4207, 1.0359, 0.8613, 1.0420, 1.1916],
        [0.9182, 0.7402, 0.8613, 1.6567, 0.6386, 1.1818],
        [2.2349, 2.7487, 1.0420, 0.6386, 1.9171, 1.7416],
        [2.3097, 2.7571, 1.1916, 1.1818, 1.7416, 2.0788]], device='cuda:0')
nu = 2:
tensor([[0.9994, 1.1415, 0.4208, 0.2565, 0.6914, 0.7773],
        [1.1415, 1.4783, 0.4354, 0.1330, 0.8506, 0.8845],
        [0.4208, 0.4354, 0.2635, 0.2442, 0.2875, 0.3707],
        [0.2565, 0.1330, 0.2442, 0.6888, 0.1122, 0.4162],
        [0.6914, 0.8506, 0.2875, 0.1122, 0.5672, 0.5327],
        [0.7773, 0.8845, 0.3707, 0.4162, 0.5327, 0.7257]], device='cuda:0')
nu = 3:
tensor([[0.2681, 0.3072, 0.1086, 0.0687, 0.1761, 0.2167],
        [0.3072, 0.4224, 0.1098, 0.0260, 0.2248, 0.2489],
        [0.1086, 0.1098, 0.0648, 0.0688, 0.0661, 0.1006],
        [0.0687, 0.0260, 0.0688, 0.2399, 0.0196, 0.1419],
        [0.1761, 0.2248, 0.0661, 0.0196, 0.1448, 0.1397],
        [0.2167, 0.2489, 0.1006, 0.1419, 0.1397, 0.2315]], device='cuda:0')
nu = 4:
tensor([[0.0817, 0.0944, 0.0320, 0.0211, 0.0510, 0.0693],
        [0.0944, 0.1434, 0.0319, 0.0058, 0.0680, 0.0811],
        [0.0320, 0.0319, 0.0198, 0.0234, 0.0175, 0.0320],
        [0.0211, 0.0058, 0.0234, 0.0964, 0.0041, 0.0594],
        [0.0510, 0.0680, 0.0175, 0.0041, 0.0432, 0.0424],
        [0.0693, 0.0811, 0.0320, 0.0594, 0.0424, 0.0910]], device='cuda:0')
Beginning hyperparameter optimization
WARNING: tried singular matrix in global optimization
WARNING: tried singular matrix in global optimization
WARNING: tried singular matrix in global optimization
WARNING: tried singular matrix in global optimization
WARNING: tried singular matrix in global optimization
WARNING: tried singular matrix in global optimization
WARNING: tried singular matrix in global optimization
WARNING: tried singular matrix in global optimization
WARNING: tried singular matrix in global optimization
WARNING: tried singular matrix in global optimization
WARNING: tried singular matrix in global optimization
[4.84399379 2.74368281 6.54895648]
2.2041332641153715
Adaptive equivalent: tensor([3539618.7253,  191570.0848,  262803.7748,  240350.0668,  164861.0870],
       device='cuda:0')

Final result (test RMSE or MAE):
500 1.6652190293458697
